import { Markup } from "telegraf";
import { InlineKeyboardButton } from "telegraf/typings/core/types/typegram";
import { TelegrafContext } from "../types";
import { productsSum } from "../../utils/productsSum";
import { rateCauses } from "./rateCauses";
interface ITimeCounterPromise {
  amountH: number;
  amountM: number;
  workTime: {
    start: number;
    end: number;
  };
}

export const keyboard = {
  RegisterPanel: [
    [Markup.button.callback("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚úÖ", "yes")],
  ],
  mainPanel: {
    changeRestaurantKey: Markup.button.callback("–ò–∑–º–µ–Ω–∏—Ç—å —à–∞—É—Ä–º–∞—Ä–∫–µ—Ç üèò", "changeRestaurant"),
    menuKey: Markup.button.callback("–ú–µ–Ω—é üç±", "menu"),
    bonusKey: Markup.button.callback("–ë–æ–Ω—É—Å–Ω—ã–π —Å—á—ë—Ç üí∏", "bonus"),
    addBonusKey: Markup.button.callback("–î–æ–±–∞–≤–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–π —Å—á—ë—Ç üí∏", "addBonus"),
    adminKey: Markup.button.callback("–ê–¥–º–∏–Ω–∫–∞ ‚å®Ô∏è", "adminPanelA"),
    promo: Markup.button.callback("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ üÉè", "promoMain"),
  },
  order: (ctx: TelegrafContext) => {
    const sum = productsSum(ctx.session.order!);
    return Markup.button.callback(`üõí –ö–æ—Ä–∑–∏–Ω–∞ - ${sum}‚ÇΩ`, "order")
  },
  order2: (ctx: TelegrafContext) => {
    const sum = productsSum(ctx.session.order!);
    return Markup.button.callback(`üõí –ö–æ—Ä–∑–∏–Ω–∞ - ${sum}‚ÇΩ`, "order")
  },
  order3: (ctx: TelegrafContext) => {
    const sum = productsSum(ctx.session.order!);
    return Markup.button.callback(`üõí –ö–æ—Ä–∑–∏–Ω–∞`, "order")
  },
  next: Markup.button.callback("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "next"),
  nextNn: Markup.button.callback("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –Ω–æ–º–µ—Ä–∞", "next"),
  back: Markup.button.callback("–ù–∞–∑–∞–¥ ‚è™", "back"),
  backT: Markup.button.callback("–ù–∞–∑–∞–¥ ‚è™", "backT"),
  backB: Markup.button.callback("–ù–∞–∑–∞–¥ ‚è™", "backB"),
  backToMain: Markup.button.callback("–í –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ ‚è™", "back"),
  counter: (amount: number, data: string, dataKey: string, centerData: string) => {
    if (amount > 1) {
      return [Markup.button.callback("-", data+":"+(amount-1)+":"+dataKey), Markup.button.callback(amount+" —à—Ç", ":"), Markup.button.callback("+", data+":"+(amount+1)+":"+dataKey)];
    } else {
      return [Markup.button.callback("‚†Ä", ":"), Markup.button.callback(amount+" —à—Ç", ":"), Markup.button.callback("+", data+":"+(amount+1)+":"+dataKey)];
    }
  },
  menu: {
    product: {
      addToOrder: (sum: number) => Markup.button.callback(`–î–æ–±–∞–≤–∏—Ç—å üõí (+ ${sum} —Ä—É–±)`, "plusOrder"),
      exceptions: Markup.button.callback("–°–æ—Å—Ç–∞–≤ ‚úèÔ∏è", "exceptions:start"),
      addDop: Markup.button.callback("–î–æ–±–∞–≤–∫–∏ ü•ì", "dop:start"),
      exit: Markup.button.callback("–û—Ç–º–µ–Ω–∞ üö´ (–Ω–∞–∑–∞–¥)", "backT"),
    }
  },
  orderPanel: {
    editOrder: Markup.button.callback("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑ üìù", "edit"),
    promo: Markup.button.callback("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ üÉè", "promo"),
    pay: Markup.button.callback("–û–ø–ª–∞—Ç–∏—Ç—å üí≥", "pay"),
    checkout: Markup.button.callback("–û—Ñ–æ—Ä–º–∏—Ç—å ‚ùáÔ∏è", "checkout"),
    clear: Markup.button.callback("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É üö´ ", "clear"),
    save: Markup.button.callback("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å üíæ", "save"),
    delete: (prodIndex: number | string) => Markup.button.callback("–£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ üö´", "del:"+prodIndex)
  },
  checkout: {
    yes: Markup.button.callback("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", "yes"),
    return: Markup.button.callback("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É ‚èÆ", "backT"),
    here: Markup.button.callback("–í –∑–∞–ª–µ üç±", "here"),
    take: Markup.button.callback("–ù–∞ –≤—ã–Ω–æ—Å üõç", "take"),
    soon: Markup.button.callback("–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–π ‚ö°Ô∏è", "soon"),
    inTime: Markup.button.callback("–ö–æ –≤—Ä–µ–º–µ–Ω–∏ ‚è∞", "inTime"),
    noComment: Markup.button.callback("–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ‚ùå", "noComment"),
    payInRestaurant: Markup.button.callback("–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ üí∏", "payInRestaurant"),
    payBonus: (bonus: number, sum: number) => {
      if (bonus < sum) {
        return Markup.button.callback(`–ë–æ–Ω—É—Å—ã ${bonus} üéÅ + ${sum-bonus} —Ä—É–± –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏`, "bonusPay:"+bonus)
      } else {
        return Markup.button.callback(`–ë–æ–Ω—É—Å—ã (${sum}) 100% üéÅ`, "bonusPay:"+sum)
      }
    },
    payOnline: Markup.button.callback("–ö–∞—Ä—Ç–æ–π (–æ–Ω–ª–∞–π–Ω) üí≥", "payOnline"),
    payButton: (date: string) => Markup.button.pay("–û–ø–ª–∞—Ç–∏—Ç—å üí≥ –¥–æ "+date),
    payCancel: (_id: string) => Markup.button.callback("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå", "cancelOrd:"+_id),
    timeCounter: (props: ITimeCounterPromise) => {
      let { amountH, amountM, workTime } = props;
      const curHours = new Date().getHours();
      const [cD, cM, cY] = (new Date().toLocaleDateString("ru")).split(".");
      const currentDate = new Date(Number(cY), Number(cM)-1, Number(cD), Number(amountH), Number(amountM)).getTime();
      const nowDate = new Date().getTime() + (30 * 60000);

      const menuH: InlineKeyboardButton[] = [];
      if (amountH > workTime.start && amountH > curHours) {
        if (currentDate-(60000 * 60) < nowDate) {
          menuH.push(Markup.button.callback("‚†Ä", ":"));
        } else {
          menuH.push(Markup.button.callback("-", "time:"+(amountH-1)+":"+amountM));
        }
      } else {
        menuH.push(Markup.button.callback("‚†Ä", ":"));
      }
      menuH.push(Markup.button.callback(amountH+" —á–∞—Å", ":"));
      if (amountH < workTime.end - 1) {
        menuH.push(Markup.button.callback("+", "time:"+(amountH+1)+":"+amountM));
      } else {
        menuH.push(Markup.button.callback("‚†Ä", ":"));
      }

      const menuM: InlineKeyboardButton[] = [];
      if (currentDate - (60000 * 10) < nowDate) {
        menuM.push(Markup.button.callback("‚†Ä", ":"));
      } else {
        menuM.push(Markup.button.callback("-10", "time:"+amountH+":"+(amountM-10)));
      }
      menuM.push(Markup.button.callback(amountM+" –º–∏–Ω", ":"));
      if (amountH === workTime.end-1 && amountM+10 > 59) {
        menuM.push(Markup.button.callback("‚†Ä", ":"));
      } else {
        menuM.push(Markup.button.callback("+10", "time:"+amountH+":"+(amountM+10)))
      }

      const menu: InlineKeyboardButton[][] = [menuH, menuM, [Markup.button.callback("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", "yes:"+amountH+":"+amountM)], [keyboard.checkout.return]];

      return menu;
    },
  },
  changeStatus: {
    accept: (_id: string) => Markup.button.callback("–ì–æ—Ç–æ–≤–∏–º ‚úÖ", "ordCS:Accept:"+_id),
    ready: (_id: string) => Markup.button.callback("–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω ‚úÖ", "ordCS:Ready:"+_id),
    placed: (_id: string) => Markup.button.callback("–í—ã–¥–∞–Ω ‚úÖ", "ordCS:Placed:"+_id),
    cancel: (_id: string) => Markup.button.callback("–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", "ordCS:Cancel:"+_id),
    repeat: (order_id: string) => Markup.button.callback("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑ üåØ", "repeatOrder:"+order_id),
    newOrder: Markup.button.callback("–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ üçΩ", "newOrder")
  },
  adminPanel: {
    main: {
      parsingKey: Markup.button.callback("–ü–∞—Ä—Å–∏–Ω–≥ –º–µ–Ω—é", "adminParseMenuA"),
      workTimeKey: Markup.button.callback("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã", "changeWorkTimeA"),
      stopRest: Markup.button.callback("–°—Ç–æ–ø —Ä–µ—Å—Ç–æ—Ä–∞–Ω", "stopRestA"),
      stopList: Markup.button.callback("–°—Ç–æ–ø-–ª–∏—Å—Ç –º–µ–Ω—é", "stopListA")
    },
    workingTime: (props: {start: number, end: number, restId: number}) => {
      const {start, end, restId} = props;
      const menuStart: InlineKeyboardButton[] = [];
      if (start-1 <= 0 || start-1 >= end) {
        menuStart.push(Markup.button.callback("‚†Ä", ":"));
      } else {
        menuStart.push(Markup.button.callback("-", "changeTime:"+(start-1)+":"+end+":"+restId));
      }
      menuStart.push(Markup.button.callback(start+" —á–∞—Å.", ":"));
      if (start+1 > 23 || start+1 >= end) {
        menuStart.push(Markup.button.callback("‚†Ä", ":"));
      } else {
        menuStart.push(Markup.button.callback("+", "changeTime:"+(start+1)+":"+end+":"+restId));
      }
      const menuEnd: InlineKeyboardButton[] = [];
      if (end-1 <= 0 || end-1 <= start) {
        menuEnd.push(Markup.button.callback("‚†Ä", ":"));
      } else {
        menuEnd.push(Markup.button.callback("-", "changeTime:"+start+":"+(end-1)+":"+restId));
      }
      menuEnd.push(Markup.button.callback(end+" —á–∞—Å.", ":"));
      if (end+1 > 23 || end+1 <= start) {
        menuEnd.push(Markup.button.callback("‚†Ä", ":"));
      } else {
        menuEnd.push(Markup.button.callback("+", "changeTime:"+start+":"+(end+1)+":"+restId));
      }
      const menu: InlineKeyboardButton[][] = [menuStart, menuEnd, [Markup.button.callback("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", "save:"+start+":"+end+":"+restId)]];
      return menu;
    }
  },
  rate: {
    grades: (_id: string) => [
      Markup.button.callback("1Ô∏è‚É£", "rateOrder:1:"+_id),
      Markup.button.callback("2Ô∏è‚É£", "rateOrder:2:"+_id),
      Markup.button.callback("3Ô∏è‚É£", "rateOrder:3:"+_id),
      Markup.button.callback("4Ô∏è‚É£", "rateOrder:4:"+_id),
      Markup.button.callback("5Ô∏è‚É£", "rateOrder:5:"+_id),
    ],
    rate_noLike: [
        [Markup.button.callback("–í—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è", "rCaus:1")],
        [Markup.button.callback("–ö–∞—á–µ—Å—Ç–≤–æ –µ–¥—ã", "rCaus:2")],
        [Markup.button.callback("–ß–∏—Å—Ç–æ—Ç–∞", "rCaus:3")],
        [Markup.button.callback("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –∑–∞–∫–∞–∑–æ–º", "rCaus:4")],
        [Markup.button.callback("–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞", "rCaus:5")],
        [Markup.button.callback("–î—Ä—É–≥–æ–µ", "rCaus:6")],
    ],
    rate_like: [
      [Markup.button.callback("–í—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è", "rCaus:1")],
      [Markup.button.callback("–ö–∞—á–µ—Å—Ç–≤–æ –µ–¥—ã", "rCaus:2")],
      [Markup.button.callback("–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞", "rCaus:5")],
      [Markup.button.callback("–î—Ä—É–≥–æ–µ", "rCaus:6")],
    ],
    rate_br: (reacts: string[], grade: number) => {
      const causButton = [];
       try {rateCauses.forEach((el, index) => {
        if (el.grade <= grade && el.gradeEnd >= grade) causButton.push([Markup.button.callback(el.text + (reacts.includes(index.toString()) ? " ‚òëÔ∏è" : ""), "rCaus:"+index.toString())])
      })} catch(e) {console.log(e)}
      causButton.push([Markup.button.callback("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚úçÔ∏è", "comment"), Markup.button.callback("–ì–æ—Ç–æ–≤–æ üëå", "save")])
      return causButton;
    },
    no_comment: Markup.button.callback("–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è üôÖ‚Äç‚ôÄÔ∏è", "noComment"),
  },
  hideThisMessage: Markup.button.callback("–ü—Ä–æ—á–∏—Ç–∞–Ω–æ | –£–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ‚ùå ", "hideThisMessage"),
};
